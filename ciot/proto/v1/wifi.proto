syntax = "proto3";

package Ciot;

import "ciot/proto/v1/tcp.proto";

// Enum representing the type of Wi-Fi connection.
enum WifiType {
  WIFI_TYPE_STA = 0; // Wi-Fi station mode.
  WIFI_TYPE_AP = 1;  // Wi-Fi access point mode.
}

// Enum representing the state of Wi-Fi scanning.
enum WifiScanState {
  WIFI_SCAN_STATE_IDLE = 0;     // Wi-Fi scan is idle.
  WIFI_SCAN_STATE_SCANNING = 1; // Wi-Fi scan is in progress.
  WIFI_SCAN_STATE_SCANNED = 2;  // Wi-Fi scan completed successfully.
  WIFI_SCAN_STATE_ERROR = 3;   // Error occurred during Wi-Fi scan.
}

// Enum representing the state of the Wi-Fi module.
enum WifiState {
  WIFI_STATE_IDLE = 0; // Wi-Fi module is idle.
}

// Enum representing different types of Wi-Fi requests.
enum WifiReqType {
  WIFI_REQ_TYPE_UNKOWN = 0; // Unknown Wi-Fi request type.
  WIFI_REQ_SCAN = 1;        // Wi-Fi scan request.
}

// Message representing information about a Wi-Fi access point.
message WifiApInfo {
  bytes bssid = 1;    // BSSID (MAC address) of the access point.
  string ssid = 2;    // SSID (network name) of the access point.
  int32 rssi = 3;     // Received Signal Strength Indicator (RSSI) of the access point.
  int32 authmode = 4; // Authentication mode of the access point.
}

// Message representing configuration for the Wi-Fi module.
message WifiCfg {
  bool disabled = 1;   // Disable Wi-Fi interface
  string ssid = 2;     // SSID of the Wi-Fi network.
  string password = 3; // Password for the Wi-Fi network.
  WifiType type = 4;   // Type of Wi-Fi connection.
  Ciot.TcpCfg tcp = 5; // TCP configuration for Wi-Fi communication.
}

// Message representing status for the Wi-Fi module.
message WifiStatus {
  uint32 disconnect_reason = 1; // Reason for Wi-Fi disconnection.
  Ciot.TcpStatus tcp = 2;      // Status of the TCP connection over Wi-Fi.
}

message WifiInfo {
  Ciot.TcpInfo tcp = 1;
  WifiApInfo ap = 2;
}

// Message representing the result of Wi-Fi scanning.
message WifiScanResult {
  int32 count = 1; // Number of access points found during scanning.
  repeated WifiApInfo ap_list = 2; // List of Wi-Fi access points found during scanning.
}

// Message representing a Wi-Fi request.
message WifiReq {
  WifiReqType type = 1;          // Type of the Wi-Fi request.
  WifiScanResult scan_result = 2; // Result of Wi-Fi scanning.
}

// Message representing data for the Wi-Fi module.
message WifiData {
  WifiCfg config = 1;    // Configuration for the Wi-Fi module.
  WifiStatus status = 2; // Status of the Wi-Fi module.
  WifiReq request = 3;   // Wi-Fi request data.
  WifiInfo info = 4;     // TCP information.
}
