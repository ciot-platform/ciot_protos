syntax = "proto3";

package Ciot;

// Enum representing the state of the MQTT client.
enum MqttClientState {
  MQTT_STATE_DISCONNECTED = 0;  // The MQTT client is disconnected.
  MQTT_STATE_CONNECTING = 1;    // The MQTT client is connecting.
  MQTT_STATE_DISCONNECTING = 2; // The MQTT client is disconnecting.
  MQTT_STATE_CONNECTED = 3;     // The MQTT client is connected.
  MQTT_STATE_ERROR = -1;        // The MQTT client encountered an error.
}

// Enum representing different transports for MQTT communication.
enum MqttClientTransport {
  MQTT_TRANSPORT_UNKNOWN = 0;  // Unknown MQTT transport.
  MQTT_TRANSPORT_OVER_TCP = 1; // MQTT over TCP.
  MQTT_TRANSPORT_OVER_SSL = 2; // MQTT over SSL.
  MQTT_TRANSPORT_OVER_WS = 3;  // MQTT over WebSocket.
  MQTT_TRANSPORT_OVER_WSS = 4; // MQTT over Secure WebSocket.
}

// Enum representing different types of MQTT client requests.
enum MqttClientReqType {
  MQTT_REQ_TYPE_UNKOWN = 0;    // Unknown MQTT request type.
  MQTT_REQ_TYPE_PUBLISH = 1;   // MQTT publish request.
  MQTT_REQ_TYPE_SUBSCRIBE = 2; // MQTT subscribe request.
}

// Message representing error details for the MQTT client.
message MqttClientError {
  int32 tls_last_err = 1;         // TLS last error code.
  int32 tls_stack_err = 2;        // TLS stack error code.
  int32 tls_cert_verify_flags = 3; // TLS certificate verification flags.
  int32 type = 4;               // Type of the error.
  int32 code = 5;               // Error code.
  int32 transport_sock = 6;      // Transport socket error.
}

// Message representing configuration for MQTT client topics.
message MqttClientTopicsCfg {
  string d2b = 1; // Device to broker topic.
  string b2d = 2; // Broker to device topic.
}

// Message representing configuration for the MQTT client.
message MqttClientCfg {
  string client_id = 1; // Client ID for MQTT connection.
  string url = 2;      // URL for MQTT connection.
  string user = 3;     // Username for MQTT authentication.
  string password = 4; // Password for MQTT authentication.
  uint32 port = 5;     // Port for MQTT connection.
  uint32 qos = 6;      // Quality of Service level for MQTT communication.
  MqttClientTransport transport = 7; // Transport type for MQTT communication.
  MqttClientTopicsCfg topics = 8; // Topics configuration for MQTT communication.
}

// Message representing status information for the MQTT client.
message MqttClientStatus {
  MqttClientState state = 1; // State of the MQTT client.
  uint32 conn_count = 2;      // Connection count.
  uint32 data_rate = 3;       // Data rate.
  uint64 last_msg_time = 4;    // Timestamp of the last message.
  MqttClientError error = 5; // Error details for the MQTT client.
}

// Message representing a publish request for the MQTT client.
message MqttClientReqPublish {
  string topic = 1;  // Topic for publishing.
  bytes message = 2; // Message payload.
  int32 qos = 3;     // Quality of Service level for the publish request.
}

// Message representing a subscribe request for the MQTT client.
message MqttClientReqSubscribe {
  string topic = 1; // Topic to subscribe to.
  int32 qos = 2;    // Quality of Service level for the subscribe request.
}

// Message representing a request for the MQTT client.
message MqttClientReq {
  MqttClientReqType type = 1;           // Type of the MQTT client request.
  MqttClientReqPublish publish = 2;     // Publish request.
  MqttClientReqSubscribe subscribe = 3; // Subscribe request.
}

// Message representing data for the MQTT client.
message MqttClientData {
  MqttClientCfg config = 1;    // Configuration for the MQTT client.
  MqttClientStatus status = 2; // Status of the MQTT client.
  MqttClientReq request = 3;   // MQTT client request data.
}
