syntax = "proto3";

package Ciot;

// Enum representing different types of system requests.
enum SysReqType {
  SYS_REQ_TYPE_UNKOWN = 0;   // Unknown system request type.
  SYS_REQ_TYPE_RESTART = 1;  // System restart request.
  SYS_REQ_TYPE_INIT_DFU = 2; // System init DFU bootloader
}

// Enum representing hardware version
enum SysHw {
  SYS_HW_UNKNOWN = 0; // Unknown hardware
  SYS_HW_ESP8266 = 1; // ESP8266
  SYS_HW_ARDUINO = 2; // Arduino Board
  SYS_HW_ESP32 = 3;   // ESP32
  SYS_HW_NRF51 = 4;   // NRF51
  SYS_HW_NRF52 = 5;   // NRF52
  SYS_HW_LINUX = 6;   // Linux device
  SYS_HW_WIN32 = 7;   // Windows device
}

// Message representing configuration for the system.
message SysCfg {}

// Enum representing hardware features of the system.
message SysHwFeatures {
  bool storage = 1;  // Storage feature.
  bool sys = 2;      // System feature.
  bool uart = 3;     // UART feature.
  bool usb = 4;      // USB feature.
  bool ethernet = 5; // Ethernet feature.
  bool wifi = 6;     // WiFi feature.
  bool ble_scn = 7;  // Bluetooth Low Energy (BLE) Scanner feature.
  bool gpio = 8;     // GPIO feature
}

// Enum representing software features of the system.
message SysSwFeatures {
  bool ntp = 1;           // NTP feature.
  bool dfu = 2;           // DFU feature
  bool ota = 3;           // OTA (Over-the-Air update) feature.
  bool http_client = 4;   // HTTP client feature.
  bool http_server = 5;   // HTTP server feature.
  bool mqtt_client = 6;   // MQTT client feature.
  bool timer = 7;         // Timer feature.
}

// Message representing system features.
message SysFeatures {
  SysHwFeatures hw = 1; // Hardware features bitmask.
  SysSwFeatures sw = 2; // Software features bitmask.
}

// Message representing system information.
message SysInfo {
  string hw_name = 1;       // Hardware name.
  bytes app_ver = 2;        // Application version.
  SysHw hardware = 3;       // Hardware type.
  SysFeatures features = 4; // System features.
}

// Message representing system status.
message SysStatus {
  uint32 reset_reason = 1; // Reason for the last reset.
  uint32 reset_count = 2;  // Number of resets.
  uint32 free_memory = 3;  // Amount of free memory.
  uint32 lifetime = 4;     // Lifetime of the system.
}

// Message representing a system request.
message SysReq {
  SysReqType type = 1; // Type of the system request.
}

// Message representing data for the system.
message SysData {
  SysCfg config = 1;    // Configuration for the system.
  SysStatus status = 2; // Status of the system.
  SysReq request = 3;   // System request data.
  SysInfo info = 4;     // System info.
}
