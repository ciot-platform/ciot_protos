syntax = "proto3";

package Ciot;

// Enum representing the state of the HTTP client.
enum HttpClientState {
  HTTP_CLIENT_STATE_IDLE = 0;          // The HTTP client is idle.
  HTTP_CLIENT_STATE_STARTED = 1;       // The HTTP client has started.
  HTTP_CLIENT_STATE_CONNECTING = 2;    // The HTTP client is connecting.
  HTTP_CLIENT_STATE_CONNECTED = 3;     // The HTTP client is connected.
  HTTP_CLIENT_STATE_DATA_RECEIVED = 4; // Data has been received by the HTTP client.
  HTTP_CLIENT_STATE_TIMEOUT = 5;       // The HTTP client has timed out.
  HTTP_CLIENT_STATE_ERROR = 6;        // The HTTP client encountered an error.
}

// Enum representing different HTTP methods.
enum HttpClientMethod {
  HTTP_METHOD_GET = 0;         // HTTP GET method.
  HTTP_METHOD_POST = 1;        // HTTP POST method.
  HTTP_METHOD_PUT = 2;         // HTTP PUT method.
  HTTP_METHOD_PATCH = 3;       // HTTP PATCH method.
  HTTP_METHOD_DELETE = 4;      // HTTP DELETE method.
  HTTP_METHOD_HEAD = 5;        // HTTP HEAD method.
  HTTP_METHOD_NOTIFY = 6;      // HTTP NOTIFY method.
  HTTP_METHOD_SUBSCRIBE = 7;   // HTTP SUBSCRIBE method.
  HTTP_METHOD_UNSUBSCRIBE = 8; // HTTP UNSUBSCRIBE method.
  HTTP_METHOD_OPTIONS = 9;     // HTTP OPTIONS method.
  HTTP_METHOD_COPY = 10;       // HTTP COPY method.
  HTTP_METHOD_MOVE = 11;       // HTTP MOVE method.
  HTTP_METHOD_LOCK = 12;       // HTTP LOCK method.
  HTTP_METHOD_UNLOCK = 13;     // HTTP UNLOCK method.
  HTTP_METHOD_PROPFIND = 14;   // HTTP PROPFIND method.
  HTTP_METHOD_PROPPATCH = 15;  // HTTP PROPPATCH method.
  HTTP_METHOD_MKCOL = 16;      // HTTP MKCOL method.
  HTTP_METHOD_MAX = 17;        // Maximum value for HTTP methods.
}

// Enum representing different HTTP transport types.
enum HttpClientTransportType {
  HTTP_TRANSPORT_UNKNOWN = 0; // Unknown transport type.
  HTTP_TRANSPORT_TCP = 1;     // TCP transport.
  HTTP_TRANSPORT_SSL = 2;     // SSL transport.
}

// Message used to stop HTTP client interface
message HttpClientStop {

}

// Message representing HTTP client configuration.
message HttpClientCfg {
  string url = 1;                        // URL for the HTTP request.
  HttpClientMethod method = 2;           // HTTP method to use.
  HttpClientTransportType transport = 3; // Transport type for the HTTP request.
  uint32 timeout = 4;                    // Timeout for the HTTP request.
}

// Message representing HTTP client status.
message HttpClientStatus {
  HttpClientState state = 1; // State of the HTTP client.
  int32 error = 2;           // Error code, if any.
}

// Message representing data to be sent by the HTTP client.
message HttpClientReqSend {
  HttpClientCfg config = 1; // Configuration for the HTTP client.
  bytes body = 2;           // Body of the HTTP request.
}

// Message representing setting a header for the HTTP client request.
message HttpClientReqSetHeader {
  string header = 1; // Header name.
  string value = 2;  // Header value.
}

// Message representing an HTTP client request.
message HttpClientReq {
  oneof type {
    HttpClientReqSend send = 1;            // Data to be sent in the request.
    HttpClientReqSetHeader set_header = 2; // Header to be set in the request.
  }
}

// Message representing HTTP client data.
message HttpClientData {
  oneof type {
    HttpClientStop stop = 1;     // Stop HTTP client.
    HttpClientCfg config = 2;    // Configuration for the HTTP client.
    HttpClientStatus status = 3; // Status of the HTTP client.
    HttpClientReq request = 4;   // HTTP client request.
  }
}
