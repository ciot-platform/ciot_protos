syntax = "proto3";

package Ciot;

option csharp_namespace = "Ciot.Protos.V2";

// Enum representing the state of the MQTT client.
enum MqttClientState {
  MQTT_CLIENT_STATE_DISCONNECTED = 0;  // The MQTT client is disconnected.
  MQTT_CLIENT_STATE_CONNECTING = 1;    // The MQTT client is connecting.
  MQTT_CLIENT_STATE_DISCONNECTING = 2; // The MQTT client is disconnecting.
  MQTT_CLIENT_STATE_CONNECTED = 3;     // The MQTT client is connected.
  MQTT_CLIENT_STATE_ERROR = 4;         // The MQTT client encountered an error.
}

// Enum representing different types of MQTT client requests.
enum MqttClientReqType {
  MQTT_CLIENT_REQ_TYPE_UNKOWN = 0;    // Unknown MQTT request type.
  MQTT_CLIENT_REQ_TYPE_PUBLISH = 1;   // MQTT publish request.
  MQTT_CLIENT_REQ_TYPE_SUBSCRIBE = 2; // MQTT subscribe request.
}

// Enum representing different MQTT Broker kinds
enum MqttClientBrokerKind {
  MQTT_CLIENT_BROKER_KIND_DEFAULT = 0; // Default used in common mqtt connections
  MQTT_CLIENT_BROKER_KIND_SSL_1_2 = 1; // SSL v1.2 required
  MQTT_CLIENT_BROKER_KIND_SSL_1_3 = 2; // SSL v1.3 required
  MQTT_CLIENT_BROKER_KIND_AWS = 3;     // AWS authentication required
  MQTT_CLIENT_BROKER_KIND_AZURE = 4;   // AZURE authentication required
}

// Message representing error details for the MQTT client.
message MqttClientError {
  int32 tls_last_err = 1;         // TLS last error code.
  int32 tls_stack_err = 2;        // TLS stack error code.
  int32 tls_cert_verify_flags = 3; // TLS certificate verification flags.
  int32 type = 4;               // Type of the error.
  int32 code = 5;               // Error code.
  int32 transport_sock = 6;      // Transport socket error.
}

// Message representing configuration for MQTT client topics.
message MqttClientTopicsCfg {
  string pub = 1; // Topic used to publish data
  string sub = 2; // Topic used to receive data.
}

// Message used to stop MQTT client interface
message MqttClientStop {

}

// Message representing configuration for the MQTT client.
message MqttClientCfg {
  string client_id = 1;                 // Client ID for MQTT connection.
  string url = 2;                       // URL for MQTT connection.
  string user = 3;                      // Username for MQTT authentication.
  string password = 4;                  // Password for MQTT authentication.
  uint32 qos = 5;                       // Quality of Service level for MQTT communication.
  MqttClientTopicsCfg topics = 6;       // Topics configuration for MQTT communication.
  MqttClientBrokerKind broker_kind = 7; // MQTT broker kind
}

// Message representing status information for the MQTT client.
message MqttClientStatus {
  MqttClientState state = 1; // State of the MQTT client.
  uint32 conn_count = 2;      // Connection count.
  uint32 data_rate = 3;       // Data rate.
  uint64 last_msg_time = 4;    // Timestamp of the last message.
  MqttClientError error = 5; // Error details for the MQTT client.
}

// Message representing a publish request for the MQTT client.
message MqttClientReqPublish {
  string topic = 1;  // Topic for publishing.
  bytes payload = 2; // Message payload.
  int32 qos = 3;     // Quality of Service level for the publish request.
}

// Message representing a subscribe request for the MQTT client.
message MqttClientReqSubscribe {
  string topic = 1; // Topic to subscribe to.
  int32 qos = 2;    // Quality of Service level for the subscribe request.
}

// Message representing a request for the MQTT client.
message MqttClientReq {
  oneof type {
    MqttClientReqPublish publish = 1;     // Publish request.
    MqttClientReqSubscribe subscribe = 2; // Subscribe request.
  }
}

// Message representing data for the MQTT client.
message MqttClientData {
  oneof type {
    MqttClientStop stop = 1;     // Stop MQTT client.
    MqttClientCfg config = 2;    // Configuration for the MQTT client.
    MqttClientStatus status = 3; // Status of the MQTT client.
    MqttClientReq request = 4;   // MQTT client request data.
  }
}
